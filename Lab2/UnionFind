import java.io.*;

public class UnionFind {

    private int[] Pi;     // parent array
    private int[] size;   // size of each set 
    private int N;        // number of items

    UnionFind(int N) {
        this.N = N;
        Pi = new int[N + 1];
        size = new int[N + 1];
        for (int k = 0; k <= N; k++) {
            Pi[k] = k;
            size[k] = 1;
        }
    }

    int find(int v) {
        int k=v;
        for(int i=0; i<Pi.length; i++)
        {  
            Pi[i]=k;
        }
        return k;
    }

    void unite(int v, int u) {
	    int a=find(v);
        int b=find(u);
        if (a == b){
            return;
        }
        
	    if(size[a]>=size[b]){
		    size[a] += size[a];
            Pi[b]=a;
	    }
	    else{
            size[b] += size[b];
            Pi[a]=b;
        }
        N--;
        
    }

    int setCount() {
        return N; 
    }
    
    void print() {
        System.out.println("Set Union Data Structure");
        for (int k=1; k<=N; k++) {
            System.out.println("Pi["+k+"]="+Pi[k]);
            if (Pi[k]==k) System.out.println("size["+k+"]="+size[k]);
        }
    }

    public static void main(String[] args) {
        System.out.println("Test UnionFind");

        int N = 16; 
        UnionFind UF = new UnionFind(N);
        
        for (int k=1; k<=3; k++){
            UF.unite(k+1,k);
            UF.unite(k+5,k+4);
            UF.unite(k+9,k+8);
            UF.unite(k+13,k+12);
        }
        UF.unite(1,5);
        UF.unite(9,13);
        UF.print();
        UF.unite(1,13);
        UF.find(2);
        UF.print();
    }
}
